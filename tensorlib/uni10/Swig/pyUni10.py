# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyUni10', [dirname(__file__)])
        except ImportError:
            import _pyUni10
            return _pyUni10
        if fp is not None:
            try:
                _mod = imp.load_module('_pyUni10', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyUni10 = swig_import_helper()
    del swig_import_helper
else:
    import _pyUni10
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyUni10.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyUni10.SwigPyIterator_value(self)
    def incr(self, n=1): return _pyUni10.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pyUni10.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyUni10.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyUni10.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyUni10.SwigPyIterator_copy(self)
    def next(self): return _pyUni10.SwigPyIterator_next(self)
    def __next__(self): return _pyUni10.SwigPyIterator___next__(self)
    def previous(self): return _pyUni10.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyUni10.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyUni10.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyUni10.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyUni10.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyUni10.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyUni10.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyUni10.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyUni10.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class int_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.int_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.int_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.int_arr___bool__(self)
    def __len__(self): return _pyUni10.int_arr___len__(self)
    def pop(self): return _pyUni10.int_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.int_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.int_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.int_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.int_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.int_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.int_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.int_arr_append(self, *args)
    def empty(self): return _pyUni10.int_arr_empty(self)
    def size(self): return _pyUni10.int_arr_size(self)
    def clear(self): return _pyUni10.int_arr_clear(self)
    def swap(self, *args): return _pyUni10.int_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.int_arr_get_allocator(self)
    def begin(self): return _pyUni10.int_arr_begin(self)
    def end(self): return _pyUni10.int_arr_end(self)
    def rbegin(self): return _pyUni10.int_arr_rbegin(self)
    def rend(self): return _pyUni10.int_arr_rend(self)
    def pop_back(self): return _pyUni10.int_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.int_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_int_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.int_arr_push_back(self, *args)
    def front(self): return _pyUni10.int_arr_front(self)
    def back(self): return _pyUni10.int_arr_back(self)
    def assign(self, *args): return _pyUni10.int_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.int_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.int_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.int_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.int_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_int_arr
    __del__ = lambda self : None;
int_arr_swigregister = _pyUni10.int_arr_swigregister
int_arr_swigregister(int_arr)

class double_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.double_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.double_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.double_arr___bool__(self)
    def __len__(self): return _pyUni10.double_arr___len__(self)
    def pop(self): return _pyUni10.double_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.double_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.double_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.double_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.double_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.double_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.double_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.double_arr_append(self, *args)
    def empty(self): return _pyUni10.double_arr_empty(self)
    def size(self): return _pyUni10.double_arr_size(self)
    def clear(self): return _pyUni10.double_arr_clear(self)
    def swap(self, *args): return _pyUni10.double_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.double_arr_get_allocator(self)
    def begin(self): return _pyUni10.double_arr_begin(self)
    def end(self): return _pyUni10.double_arr_end(self)
    def rbegin(self): return _pyUni10.double_arr_rbegin(self)
    def rend(self): return _pyUni10.double_arr_rend(self)
    def pop_back(self): return _pyUni10.double_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.double_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_double_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.double_arr_push_back(self, *args)
    def front(self): return _pyUni10.double_arr_front(self)
    def back(self): return _pyUni10.double_arr_back(self)
    def assign(self, *args): return _pyUni10.double_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.double_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.double_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.double_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.double_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_double_arr
    __del__ = lambda self : None;
double_arr_swigregister = _pyUni10.double_arr_swigregister
double_arr_swigregister(double_arr)

class Qnum_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Qnum_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Qnum_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.Qnum_arr___bool__(self)
    def __len__(self): return _pyUni10.Qnum_arr___len__(self)
    def pop(self): return _pyUni10.Qnum_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.Qnum_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.Qnum_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.Qnum_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Qnum_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.Qnum_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.Qnum_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.Qnum_arr_append(self, *args)
    def empty(self): return _pyUni10.Qnum_arr_empty(self)
    def size(self): return _pyUni10.Qnum_arr_size(self)
    def clear(self): return _pyUni10.Qnum_arr_clear(self)
    def swap(self, *args): return _pyUni10.Qnum_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.Qnum_arr_get_allocator(self)
    def begin(self): return _pyUni10.Qnum_arr_begin(self)
    def end(self): return _pyUni10.Qnum_arr_end(self)
    def rbegin(self): return _pyUni10.Qnum_arr_rbegin(self)
    def rend(self): return _pyUni10.Qnum_arr_rend(self)
    def pop_back(self): return _pyUni10.Qnum_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.Qnum_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_Qnum_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.Qnum_arr_push_back(self, *args)
    def front(self): return _pyUni10.Qnum_arr_front(self)
    def back(self): return _pyUni10.Qnum_arr_back(self)
    def assign(self, *args): return _pyUni10.Qnum_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.Qnum_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.Qnum_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.Qnum_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.Qnum_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_Qnum_arr
    __del__ = lambda self : None;
Qnum_arr_swigregister = _pyUni10.Qnum_arr_swigregister
Qnum_arr_swigregister(Qnum_arr)

class Bond_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bond_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Bond_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Bond_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.Bond_arr___bool__(self)
    def __len__(self): return _pyUni10.Bond_arr___len__(self)
    def pop(self): return _pyUni10.Bond_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.Bond_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.Bond_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.Bond_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Bond_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.Bond_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.Bond_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.Bond_arr_append(self, *args)
    def empty(self): return _pyUni10.Bond_arr_empty(self)
    def size(self): return _pyUni10.Bond_arr_size(self)
    def clear(self): return _pyUni10.Bond_arr_clear(self)
    def swap(self, *args): return _pyUni10.Bond_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.Bond_arr_get_allocator(self)
    def begin(self): return _pyUni10.Bond_arr_begin(self)
    def end(self): return _pyUni10.Bond_arr_end(self)
    def rbegin(self): return _pyUni10.Bond_arr_rbegin(self)
    def rend(self): return _pyUni10.Bond_arr_rend(self)
    def pop_back(self): return _pyUni10.Bond_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.Bond_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_Bond_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.Bond_arr_push_back(self, *args)
    def front(self): return _pyUni10.Bond_arr_front(self)
    def back(self): return _pyUni10.Bond_arr_back(self)
    def assign(self, *args): return _pyUni10.Bond_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.Bond_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.Bond_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.Bond_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.Bond_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_Bond_arr
    __del__ = lambda self : None;
Bond_arr_swigregister = _pyUni10.Bond_arr_swigregister
Bond_arr_swigregister(Bond_arr)

class Qnum2int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum2int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum2int, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Qnum2int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Qnum2int___nonzero__(self)
    def __bool__(self): return _pyUni10.Qnum2int___bool__(self)
    def __len__(self): return _pyUni10.Qnum2int___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyUni10.Qnum2int___getitem__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Qnum2int___delitem__(self, *args)
    def has_key(self, *args): return _pyUni10.Qnum2int_has_key(self, *args)
    def keys(self): return _pyUni10.Qnum2int_keys(self)
    def values(self): return _pyUni10.Qnum2int_values(self)
    def items(self): return _pyUni10.Qnum2int_items(self)
    def __contains__(self, *args): return _pyUni10.Qnum2int___contains__(self, *args)
    def key_iterator(self): return _pyUni10.Qnum2int_key_iterator(self)
    def value_iterator(self): return _pyUni10.Qnum2int_value_iterator(self)
    def __setitem__(self, *args): return _pyUni10.Qnum2int___setitem__(self, *args)
    def asdict(self): return _pyUni10.Qnum2int_asdict(self)
    def __init__(self, *args): 
        this = _pyUni10.new_Qnum2int(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyUni10.Qnum2int_empty(self)
    def size(self): return _pyUni10.Qnum2int_size(self)
    def clear(self): return _pyUni10.Qnum2int_clear(self)
    def swap(self, *args): return _pyUni10.Qnum2int_swap(self, *args)
    def get_allocator(self): return _pyUni10.Qnum2int_get_allocator(self)
    def begin(self): return _pyUni10.Qnum2int_begin(self)
    def end(self): return _pyUni10.Qnum2int_end(self)
    def rbegin(self): return _pyUni10.Qnum2int_rbegin(self)
    def rend(self): return _pyUni10.Qnum2int_rend(self)
    def count(self, *args): return _pyUni10.Qnum2int_count(self, *args)
    def erase(self, *args): return _pyUni10.Qnum2int_erase(self, *args)
    def find(self, *args): return _pyUni10.Qnum2int_find(self, *args)
    def lower_bound(self, *args): return _pyUni10.Qnum2int_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyUni10.Qnum2int_upper_bound(self, *args)
    __swig_destroy__ = _pyUni10.delete_Qnum2int
    __del__ = lambda self : None;
Qnum2int_swigregister = _pyUni10.Qnum2int_swigregister
Qnum2int_swigregister(Qnum2int)

class Matrix_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Matrix_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Matrix_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.Matrix_arr___bool__(self)
    def __len__(self): return _pyUni10.Matrix_arr___len__(self)
    def pop(self): return _pyUni10.Matrix_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.Matrix_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.Matrix_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.Matrix_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Matrix_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.Matrix_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.Matrix_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.Matrix_arr_append(self, *args)
    def empty(self): return _pyUni10.Matrix_arr_empty(self)
    def size(self): return _pyUni10.Matrix_arr_size(self)
    def clear(self): return _pyUni10.Matrix_arr_clear(self)
    def swap(self, *args): return _pyUni10.Matrix_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.Matrix_arr_get_allocator(self)
    def begin(self): return _pyUni10.Matrix_arr_begin(self)
    def end(self): return _pyUni10.Matrix_arr_end(self)
    def rbegin(self): return _pyUni10.Matrix_arr_rbegin(self)
    def rend(self): return _pyUni10.Matrix_arr_rend(self)
    def pop_back(self): return _pyUni10.Matrix_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.Matrix_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_Matrix_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.Matrix_arr_push_back(self, *args)
    def front(self): return _pyUni10.Matrix_arr_front(self)
    def back(self): return _pyUni10.Matrix_arr_back(self)
    def assign(self, *args): return _pyUni10.Matrix_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.Matrix_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.Matrix_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.Matrix_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.Matrix_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_Matrix_arr
    __del__ = lambda self : None;
Matrix_arr_swigregister = _pyUni10.Matrix_arr_swigregister
Matrix_arr_swigregister(Matrix_arr)

class Qnum2Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum2Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum2Matrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Qnum2Matrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Qnum2Matrix___nonzero__(self)
    def __bool__(self): return _pyUni10.Qnum2Matrix___bool__(self)
    def __len__(self): return _pyUni10.Qnum2Matrix___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyUni10.Qnum2Matrix___getitem__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Qnum2Matrix___delitem__(self, *args)
    def has_key(self, *args): return _pyUni10.Qnum2Matrix_has_key(self, *args)
    def keys(self): return _pyUni10.Qnum2Matrix_keys(self)
    def values(self): return _pyUni10.Qnum2Matrix_values(self)
    def items(self): return _pyUni10.Qnum2Matrix_items(self)
    def __contains__(self, *args): return _pyUni10.Qnum2Matrix___contains__(self, *args)
    def key_iterator(self): return _pyUni10.Qnum2Matrix_key_iterator(self)
    def value_iterator(self): return _pyUni10.Qnum2Matrix_value_iterator(self)
    def __setitem__(self, *args): return _pyUni10.Qnum2Matrix___setitem__(self, *args)
    def asdict(self): return _pyUni10.Qnum2Matrix_asdict(self)
    def __init__(self, *args): 
        this = _pyUni10.new_Qnum2Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyUni10.Qnum2Matrix_empty(self)
    def size(self): return _pyUni10.Qnum2Matrix_size(self)
    def clear(self): return _pyUni10.Qnum2Matrix_clear(self)
    def swap(self, *args): return _pyUni10.Qnum2Matrix_swap(self, *args)
    def get_allocator(self): return _pyUni10.Qnum2Matrix_get_allocator(self)
    def begin(self): return _pyUni10.Qnum2Matrix_begin(self)
    def end(self): return _pyUni10.Qnum2Matrix_end(self)
    def rbegin(self): return _pyUni10.Qnum2Matrix_rbegin(self)
    def rend(self): return _pyUni10.Qnum2Matrix_rend(self)
    def count(self, *args): return _pyUni10.Qnum2Matrix_count(self, *args)
    def erase(self, *args): return _pyUni10.Qnum2Matrix_erase(self, *args)
    def find(self, *args): return _pyUni10.Qnum2Matrix_find(self, *args)
    def lower_bound(self, *args): return _pyUni10.Qnum2Matrix_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyUni10.Qnum2Matrix_upper_bound(self, *args)
    __swig_destroy__ = _pyUni10.delete_Qnum2Matrix
    __del__ = lambda self : None;
Qnum2Matrix_swigregister = _pyUni10.Qnum2Matrix_swigregister
Qnum2Matrix_swigregister(Qnum2Matrix)


def QnumF(*args):
  """
    QnumF(uni10::parityFType _prtF, int _U1=0, uni10::parityType _prt=PRT_EVEN) -> Qnum
    QnumF(uni10::parityFType _prtF, int _U1=0) -> Qnum
    QnumF(uni10::parityFType _prtF) -> Qnum
    """
  return _pyUni10.QnumF(*args)
PRT_EVEN = _pyUni10.PRT_EVEN
PRT_ODD = _pyUni10.PRT_ODD
PRTF_EVEN = _pyUni10.PRTF_EVEN
PRTF_ODD = _pyUni10.PRTF_ODD
class _Swap(_object):
    """Proxy of C++ uni10::_Swap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Swap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Swap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b1"] = _pyUni10._Swap_b1_set
    __swig_getmethods__["b1"] = _pyUni10._Swap_b1_get
    if _newclass:b1 = _swig_property(_pyUni10._Swap_b1_get, _pyUni10._Swap_b1_set)
    __swig_setmethods__["b2"] = _pyUni10._Swap_b2_set
    __swig_getmethods__["b2"] = _pyUni10._Swap_b2_get
    if _newclass:b2 = _swig_property(_pyUni10._Swap_b2_get, _pyUni10._Swap_b2_set)
    def __init__(self): 
        """__init__(uni10::_Swap self) -> _Swap"""
        this = _pyUni10.new__Swap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUni10.delete__Swap
    __del__ = lambda self : None;
_Swap_swigregister = _pyUni10._Swap_swigregister
_Swap_swigregister(_Swap)

class Qnum(_object):
    """Proxy of C++ uni10::Qnum class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum, name)
    def __init__(self, *args): 
        """
        __init__(uni10::Qnum self, int _U1=0, uni10::parityType _prt=PRT_EVEN) -> Qnum
        __init__(uni10::Qnum self, int _U1=0) -> Qnum
        __init__(uni10::Qnum self) -> Qnum
        __init__(uni10::Qnum self, Qnum _q) -> Qnum
        """
        this = _pyUni10.new_Qnum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUni10.delete_Qnum
    __del__ = lambda self : None;
    def U1(self):
        """U1(Qnum self) -> int"""
        return _pyUni10.Qnum_U1(self)

    def prt(self):
        """prt(Qnum self) -> uni10::parityType"""
        return _pyUni10.Qnum_prt(self)

    def prtF(self):
        """prtF(Qnum self) -> uni10::parityFType"""
        return _pyUni10.Qnum_prtF(self)

    def assign(self, *args):
        """
        assign(Qnum self, int _U1=0, uni10::parityType _prt=PRT_EVEN)
        assign(Qnum self, int _U1=0)
        assign(Qnum self)
        """
        return _pyUni10.Qnum_assign(self, *args)

    def isFermionic():
        """isFermionic() -> bool"""
        return _pyUni10.Qnum_isFermionic()

    if _newclass:isFermionic = staticmethod(isFermionic)
    __swig_getmethods__["isFermionic"] = lambda x: isFermionic
    def __eq__(self, *args):
        """__eq__(Qnum self, Qnum q2) -> bool"""
        return _pyUni10.Qnum___eq__(self, *args)

    def __mul__(self, *args):
        """__mul__(Qnum self, Qnum q2) -> Qnum"""
        return _pyUni10.Qnum___mul__(self, *args)

    def __neg__(self):
        """__neg__(Qnum self) -> Qnum"""
        return _pyUni10.Qnum___neg__(self)

    def __copy__(self):
        """__copy__(Qnum self) -> Qnum"""
        return _pyUni10.Qnum___copy__(self)

    def cp(self):
        """cp(Qnum self) -> Qnum"""
        return _pyUni10.Qnum_cp(self)

    def __repr__(self):
        """__repr__(Qnum self) -> std::string const"""
        return _pyUni10.Qnum___repr__(self)

    def assignF(self, *args):
        """
        assignF(Qnum self, uni10::parityFType _prtF, int _U1=0, uni10::parityType _prt=PRT_EVEN) -> Qnum
        assignF(Qnum self, uni10::parityFType _prtF, int _U1=0) -> Qnum
        assignF(Qnum self, uni10::parityFType _prtF) -> Qnum
        """
        return _pyUni10.Qnum_assignF(self, *args)

    U1_UPB = _pyUni10.Qnum_U1_UPB
    U1_LOB = _pyUni10.Qnum_U1_LOB
Qnum_swigregister = _pyUni10.Qnum_swigregister
Qnum_swigregister(Qnum)

def Qnum_isFermionic():
  """Qnum_isFermionic() -> bool"""
  return _pyUni10.Qnum_isFermionic()

BD_IN = _pyUni10.BD_IN
BD_OUT = _pyUni10.BD_OUT
class Bond(_object):
    """Proxy of C++ uni10::Bond class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    def __init__(self, *args): 
        """
        __init__(uni10::Bond self, uni10::bondType _type, int dim) -> Bond
        __init__(uni10::Bond self, uni10::bondType arg2, Qnum_arr qnums) -> Bond
        __init__(uni10::Bond self, Bond _b) -> Bond
        """
        this = _pyUni10.new_Bond(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args):
        """
        assign(Bond self, uni10::bondType arg2, int dim)
        assign(Bond self, uni10::bondType arg2, Qnum_arr qnums)
        """
        return _pyUni10.Bond_assign(self, *args)

    def type(self):
        """type(Bond self) -> uni10::bondType"""
        return _pyUni10.Bond_type(self)

    def dim(self):
        """dim(Bond self) -> int"""
        return _pyUni10.Bond_dim(self)

    def __eq__(self, *args):
        """__eq__(Bond self, Bond b2) -> bool"""
        return _pyUni10.Bond___eq__(self, *args)

    def __copy__(self):
        """__copy__(Bond self) -> Bond"""
        return _pyUni10.Bond___copy__(self)

    def cp(self):
        """cp(Bond self) -> Bond"""
        return _pyUni10.Bond_cp(self)

    def __repr__(self):
        """__repr__(Bond self) -> std::string const"""
        return _pyUni10.Bond___repr__(self)

    def change(self, *args):
        """change(Bond self, uni10::bondType tp)"""
        return _pyUni10.Bond_change(self, *args)

    def combine(self, *args):
        """combine(Bond self, Bond bd) -> Bond"""
        return _pyUni10.Bond_combine(self, *args)

    def degeneracy(self):
        """degeneracy(Bond self) -> Qnum2int"""
        return _pyUni10.Bond_degeneracy(self)

    def Qlist(self):
        """Qlist(Bond self) -> Qnum_arr"""
        return _pyUni10.Bond_Qlist(self)

    __swig_destroy__ = _pyUni10.delete_Bond
    __del__ = lambda self : None;
Bond_swigregister = _pyUni10.Bond_swigregister
Bond_swigregister(Bond)


def combine(*args):
  """
    combine(uni10::bondType tp, Bond_arr bds) -> Bond
    combine(Bond_arr bds) -> Bond
    """
  return _pyUni10.combine(*args)
class Matrix(_object):
    """Proxy of C++ uni10::Matrix class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    def __init__(self, *args): 
        """
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, bool _diag=False, bool _ongpu=False) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, bool _diag=False) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, double * _elem, bool _diag=False, bool src_ongpu=False) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, double * _elem, bool _diag=False) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, double * _elem) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, double_arr _elem, bool _diag=False, bool src_ongpu=False) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, double_arr _elem, bool _diag=False) -> Matrix
        __init__(uni10::Matrix self, size_t _Rnum, size_t _Cnum, double_arr _elem) -> Matrix
        __init__(uni10::Matrix self) -> Matrix
        """
        this = _pyUni10.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUni10.delete_Matrix
    __del__ = lambda self : None;
    def row(self):
        """row(Matrix self) -> int"""
        return _pyUni10.Matrix_row(self)

    def col(self):
        """col(Matrix self) -> int"""
        return _pyUni10.Matrix_col(self)

    def isDiag(self):
        """isDiag(Matrix self) -> bool"""
        return _pyUni10.Matrix_isDiag(self)

    def isOngpu(self):
        """isOngpu(Matrix self) -> bool"""
        return _pyUni10.Matrix_isOngpu(self)

    def elemNum(self):
        """elemNum(Matrix self) -> size_t"""
        return _pyUni10.Matrix_elemNum(self)

    def eigh(self):
        """eigh(Matrix self) -> Matrix_arr"""
        return _pyUni10.Matrix_eigh(self)

    def svd(self):
        """svd(Matrix self) -> Matrix_arr"""
        return _pyUni10.Matrix_svd(self)

    def lanczosEig(self, *args):
        """
        lanczosEig(Matrix self, Matrix psi, int & max_iter, double err_tol=5E-15) -> double
        lanczosEig(Matrix self, Matrix psi, int & max_iter) -> double
        """
        return _pyUni10.Matrix_lanczosEig(self, *args)

    def setElem(self, *args):
        """
        setElem(Matrix self, double * elem, bool _ongpu=False)
        setElem(Matrix self, double * elem)
        setElem(Matrix self, double_arr elem, bool _ongpu=False)
        setElem(Matrix self, double_arr elem)
        """
        return _pyUni10.Matrix_setElem(self, *args)

    def getElem(self):
        """getElem(Matrix self) -> double *"""
        return _pyUni10.Matrix_getElem(self)

    def getHostElem(self):
        """getHostElem(Matrix self) -> double *"""
        return _pyUni10.Matrix_getHostElem(self)

    def randomize(self):
        """randomize(Matrix self)"""
        return _pyUni10.Matrix_randomize(self)

    def orthoRand(self):
        """orthoRand(Matrix self)"""
        return _pyUni10.Matrix_orthoRand(self)

    def identity(self):
        """identity(Matrix self)"""
        return _pyUni10.Matrix_identity(self)

    def set_zero(self):
        """set_zero(Matrix self)"""
        return _pyUni10.Matrix_set_zero(self)

    def transpose(self):
        """transpose(Matrix self) -> Matrix"""
        return _pyUni10.Matrix_transpose(self)

    def resize(self, *args):
        """resize(Matrix self, size_t row, size_t col) -> Matrix"""
        return _pyUni10.Matrix_resize(self, *args)

    def trace(self):
        """trace(Matrix self) -> double"""
        return _pyUni10.Matrix_trace(self)

    def norm(self):
        """norm(Matrix self) -> double"""
        return _pyUni10.Matrix_norm(self)

    def sum(self):
        """sum(Matrix self) -> double"""
        return _pyUni10.Matrix_sum(self)

    def save(self, *args):
        """save(Matrix self, std::string const & fname)"""
        return _pyUni10.Matrix_save(self, *args)

    def load(self, *args):
        """load(Matrix self, std::string const & fname)"""
        return _pyUni10.Matrix_load(self, *args)

    def __eq__(self, *args):
        """__eq__(Matrix self, Matrix m2) -> bool"""
        return _pyUni10.Matrix___eq__(self, *args)

    def __copy__(self):
        """__copy__(Matrix self) -> Matrix"""
        return _pyUni10.Matrix___copy__(self)

    def cp(self):
        """cp(Matrix self) -> Matrix"""
        return _pyUni10.Matrix_cp(self)

    def __repr__(self):
        """__repr__(Matrix self) -> std::string const"""
        return _pyUni10.Matrix___repr__(self)

    def __add__(self, *args):
        """__add__(Matrix self, Matrix Ma) -> Matrix"""
        return _pyUni10.Matrix___add__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Matrix self, Matrix Ma) -> Matrix
        __mul__(Matrix self, double a) -> Matrix
        """
        return _pyUni10.Matrix___mul__(self, *args)

    def __rmul__(self, *args):
        """__rmul__(Matrix self, double a) -> Matrix"""
        return _pyUni10.Matrix___rmul__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(Matrix self, PyObject * parm) -> double"""
        return _pyUni10.Matrix___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Matrix self, PyObject * parm, double val)"""
        return _pyUni10.Matrix___setitem__(self, *args)

    def __imul__(self, *args):
        """__imul__(Matrix self, double a) -> Matrix"""
        return _pyUni10.Matrix___imul__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(Matrix self, Matrix Mb) -> Matrix"""
        return _pyUni10.Matrix___iadd__(self, *args)

    def toGPU(self):
        """toGPU(Matrix self) -> bool"""
        return _pyUni10.Matrix_toGPU(self)

Matrix_swigregister = _pyUni10.Matrix_swigregister
Matrix_swigregister(Matrix)


def takeExp(*args):
  """takeExp(double a, Matrix mat) -> Matrix"""
  return _pyUni10.takeExp(*args)

def throwException():
  """throwException()"""
  return _pyUni10.throwException()
class UniTensor(_object):
    """Proxy of C++ uni10::UniTensor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UniTensor, name)
    def __init__(self, *args): 
        """
        __init__(uni10::UniTensor self) -> UniTensor
        __init__(uni10::UniTensor self, double val) -> UniTensor
        __init__(uni10::UniTensor self, std::string const & fname) -> UniTensor
        __init__(uni10::UniTensor self, Bond_arr _bonds, std::string const & _name="") -> UniTensor
        __init__(uni10::UniTensor self, Bond_arr _bonds) -> UniTensor
        __init__(uni10::UniTensor self, Bond_arr _bonds, int_arr labels, std::string const & _name="") -> UniTensor
        __init__(uni10::UniTensor self, Bond_arr _bonds, int_arr labels) -> UniTensor
        __init__(uni10::UniTensor self, Bond_arr _bonds, int * labels, std::string const & _name="") -> UniTensor
        __init__(uni10::UniTensor self, Bond_arr _bonds, int * labels) -> UniTensor
        __init__(uni10::UniTensor self, UniTensor UniT) -> UniTensor
        """
        this = _pyUni10.new_UniTensor(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args):
        """assign(UniTensor self, Bond_arr _bond) -> UniTensor"""
        return _pyUni10.UniTensor_assign(self, *args)

    __swig_destroy__ = _pyUni10.delete_UniTensor
    __del__ = lambda self : None;
    def setLabel(self, *args):
        """
        setLabel(UniTensor self, int_arr newLabels)
        setLabel(UniTensor self, int * newLabels)
        """
        return _pyUni10.UniTensor_setLabel(self, *args)

    def setRawElem(self, *args):
        """setRawElem(UniTensor self, double_arr rawElem)"""
        return _pyUni10.UniTensor_setRawElem(self, *args)

    def at(self, *args):
        """at(UniTensor self, int_arr idxs) -> double"""
        return _pyUni10.UniTensor_at(self, *args)

    def blockQnum(self, *args):
        """
        blockQnum(UniTensor self) -> Qnum_arr
        blockQnum(UniTensor self, int idx) -> Qnum
        """
        return _pyUni10.UniTensor_blockQnum(self, *args)

    def blockNum(self):
        """blockNum(UniTensor self) -> size_t"""
        return _pyUni10.UniTensor_blockNum(self)

    def save(self, *args):
        """save(UniTensor self, std::string const & fname)"""
        return _pyUni10.UniTensor_save(self, *args)

    def label(self, *args):
        """
        label(UniTensor self) -> int_arr
        label(UniTensor self, int idx) -> int
        """
        return _pyUni10.UniTensor_label(self, *args)

    def bond(self, *args):
        """
        bond(UniTensor self) -> Bond_arr
        bond(UniTensor self, int idx) -> Bond
        """
        return _pyUni10.UniTensor_bond(self, *args)

    def setName(self, *args):
        """setName(UniTensor self, std::string const & _name)"""
        return _pyUni10.UniTensor_setName(self, *args)

    def getName(self):
        """getName(UniTensor self) -> std::string"""
        return _pyUni10.UniTensor_getName(self)

    def elemNum(self):
        """elemNum(UniTensor self) -> size_t"""
        return _pyUni10.UniTensor_elemNum(self)

    def bondNum(self):
        """bondNum(UniTensor self) -> size_t"""
        return _pyUni10.UniTensor_bondNum(self)

    def inBondNum(self):
        """inBondNum(UniTensor self) -> int"""
        return _pyUni10.UniTensor_inBondNum(self)

    def profile():
        """profile()"""
        return _pyUni10.UniTensor_profile()

    if _newclass:profile = staticmethod(profile)
    __swig_getmethods__["profile"] = lambda x: profile
    def permute(self, *args):
        """
        permute(UniTensor self, int_arr newLabels, int inBondNum) -> UniTensor
        permute(UniTensor self, int * newLabels, int inBondNum) -> UniTensor
        permute(UniTensor self, int inBondNum) -> UniTensor
        """
        return _pyUni10.UniTensor_permute(self, *args)

    def transpose(self):
        """transpose(UniTensor self) -> UniTensor"""
        return _pyUni10.UniTensor_transpose(self)

    def randomize(self):
        """randomize(UniTensor self)"""
        return _pyUni10.UniTensor_randomize(self)

    def __copy__(self):
        """__copy__(UniTensor self) -> UniTensor"""
        return _pyUni10.UniTensor___copy__(self)

    def cp(self):
        """cp(UniTensor self) -> UniTensor"""
        return _pyUni10.UniTensor_cp(self)

    def __repr__(self):
        """__repr__(UniTensor self) -> std::string const"""
        return _pyUni10.UniTensor___repr__(self)

    def __add__(self, *args):
        """__add__(UniTensor self, UniTensor Ta) -> UniTensor"""
        return _pyUni10.UniTensor___add__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(UniTensor self, UniTensor Ta) -> UniTensor
        __mul__(UniTensor self, double a) -> UniTensor
        """
        return _pyUni10.UniTensor___mul__(self, *args)

    def __rmul__(self, *args):
        """__rmul__(UniTensor self, double a) -> UniTensor"""
        return _pyUni10.UniTensor___rmul__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(UniTensor self, UniTensor Tb) -> UniTensor"""
        return _pyUni10.UniTensor___iadd__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(UniTensor self, UniTensor Tb) -> UniTensor
        __imul__(UniTensor self, double a) -> UniTensor
        """
        return _pyUni10.UniTensor___imul__(self, *args)

    def getBlock(self, *args):
        """
        getBlock(UniTensor self, Qnum qnum, bool diag=False) -> Matrix
        getBlock(UniTensor self, Qnum qnum) -> Matrix
        """
        return _pyUni10.UniTensor_getBlock(self, *args)

    def putBlock(self, *args):
        """putBlock(UniTensor self, Qnum qnum, Matrix mat)"""
        return _pyUni10.UniTensor_putBlock(self, *args)

    def getBlocks(self):
        """getBlocks(UniTensor self) -> Qnum2Matrix"""
        return _pyUni10.UniTensor_getBlocks(self)

    def rawElem(self):
        """rawElem(UniTensor self) -> Matrix"""
        return _pyUni10.UniTensor_rawElem(self)

    def printRawElem(self):
        """printRawElem(UniTensor self)"""
        return _pyUni10.UniTensor_printRawElem(self)

    def orthoRand(self, *args):
        """
        orthoRand(UniTensor self)
        orthoRand(UniTensor self, Qnum qnum)
        """
        return _pyUni10.UniTensor_orthoRand(self, *args)

    def identity(self, *args):
        """
        identity(UniTensor self)
        identity(UniTensor self, Qnum qnum)
        """
        return _pyUni10.UniTensor_identity(self, *args)

    def set_zero(self, *args):
        """
        set_zero(UniTensor self, Qnum qnum)
        set_zero(UniTensor self)
        """
        return _pyUni10.UniTensor_set_zero(self, *args)

    def getElem(self):
        """getElem(UniTensor self) -> double *"""
        return _pyUni10.UniTensor_getElem(self)

    def setElem(self, *args):
        """
        setElem(UniTensor self, double * elem, bool _ongpu=False)
        setElem(UniTensor self, double * elem)
        setElem(UniTensor self, double_arr elem, bool _ongpu=False)
        setElem(UniTensor self, double_arr elem)
        """
        return _pyUni10.UniTensor_setElem(self, *args)

    def exSwap(self, *args):
        """exSwap(UniTensor self, UniTensor Tb) -> std::vector< uni10::_Swap,std::allocator< uni10::_Swap > >"""
        return _pyUni10.UniTensor_exSwap(self, *args)

    def similar(self, *args):
        """similar(UniTensor self, UniTensor Tb) -> bool"""
        return _pyUni10.UniTensor_similar(self, *args)

    def addGate(self, *args):
        """addGate(UniTensor self, std::vector< uni10::_Swap,std::allocator< uni10::_Swap > > swaps)"""
        return _pyUni10.UniTensor_addGate(self, *args)

    def elemCmp(self, *args):
        """elemCmp(UniTensor self, UniTensor UniT) -> bool"""
        return _pyUni10.UniTensor_elemCmp(self, *args)

    def trace(self):
        """trace(UniTensor self) -> double"""
        return _pyUni10.UniTensor_trace(self)

    def combineBond(self, *args):
        """combineBond(UniTensor self, int_arr combined_labels) -> UniTensor"""
        return _pyUni10.UniTensor_combineBond(self, *args)

    def partialTrace(self, *args):
        """partialTrace(UniTensor self, int la, int lb) -> UniTensor"""
        return _pyUni10.UniTensor_partialTrace(self, *args)

UniTensor_swigregister = _pyUni10.UniTensor_swigregister
UniTensor_swigregister(UniTensor)

def UniTensor_profile():
  """UniTensor_profile()"""
  return _pyUni10.UniTensor_profile()


def contract(*args):
  """contract(UniTensor Ta, UniTensor Tb, bool fast) -> UniTensor"""
  return _pyUni10.contract(*args)

def otimes(*args):
  """otimes(UniTensor Ta, UniTensor Tb) -> UniTensor"""
  return _pyUni10.otimes(*args)
class Network(_object):
    """Proxy of C++ uni10::Network class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    def __init__(self, *args): 
        """
        __init__(uni10::Network self, std::string const & fname, std::vector< uni10::UniTensor *,std::allocator< uni10::UniTensor * > > const & tens) -> Network
        __init__(uni10::Network self, std::string const & fname) -> Network
        """
        this = _pyUni10.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUni10.delete_Network
    __del__ = lambda self : None;
    def putTensor(self, *args):
        """
        putTensor(Network self, int idx, UniTensor UniT, bool force=True)
        putTensor(Network self, int idx, UniTensor UniT)
        putTensor(Network self, std::string const & name, UniTensor UniT, bool force=True)
        putTensor(Network self, std::string const & name, UniTensor UniT)
        """
        return _pyUni10.Network_putTensor(self, *args)

    def putTensorT(self, *args):
        """
        putTensorT(Network self, std::string const & nameT, UniTensor UniT, bool force=True)
        putTensorT(Network self, std::string const & nameT, UniTensor UniT)
        """
        return _pyUni10.Network_putTensorT(self, *args)

    def launch(self, name=""):
        """
        launch(Network self, std::string const & name="") -> UniTensor
        launch(Network self) -> UniTensor
        """
        return _pyUni10.Network_launch(self, name)

    def rollcall(self):
        """rollcall(Network self) -> int"""
        return _pyUni10.Network_rollcall(self)

    def max_tensor_elemNum(self):
        """max_tensor_elemNum(Network self) -> size_t"""
        return _pyUni10.Network_max_tensor_elemNum(self)

    def sum_of_memory_usage(self):
        """sum_of_memory_usage(Network self) -> size_t"""
        return _pyUni10.Network_sum_of_memory_usage(self)

    def memory_requirement(self):
        """memory_requirement(Network self) -> size_t"""
        return _pyUni10.Network_memory_requirement(self)

    def profile(self):
        """profile(Network self)"""
        return _pyUni10.Network_profile(self)

    def __copy__(self):
        """__copy__(Network self) -> Network"""
        return _pyUni10.Network___copy__(self)

    def cp(self):
        """cp(Network self) -> Network"""
        return _pyUni10.Network_cp(self)

    def __repr__(self):
        """__repr__(Network self) -> std::string const"""
        return _pyUni10.Network___repr__(self)

Network_swigregister = _pyUni10.Network_swigregister
Network_swigregister(Network)

# This file is compatible with both classic and new-style classes.


